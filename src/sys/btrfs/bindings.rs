/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const BTRFS_IOCTL_MAGIC: u32 = 148;
pub const BTRFS_VOL_NAME_MAX: u32 = 255;
pub const BTRFS_PATH_NAME_MAX: u32 = 4087;
pub const BTRFS_DEVICE_PATH_NAME_MAX: u32 = 1024;
pub const BTRFS_SUBVOL_RDONLY: u32 = 2;
pub const BTRFS_SUBVOL_QGROUP_INHERIT: u32 = 4;
pub const BTRFS_DEVICE_SPEC_BY_ID: u32 = 8;
pub const BTRFS_SUBVOL_SPEC_BY_ID: u32 = 16;
pub const BTRFS_VOL_ARG_V2_FLAGS_SUPPORTED: u32 = 30;
pub const BTRFS_FSID_SIZE: u32 = 16;
pub const BTRFS_UUID_SIZE: u32 = 16;
pub const BTRFS_QGROUP_INHERIT_SET_LIMITS: u32 = 1;
pub const BTRFS_SUBVOL_NAME_MAX: u32 = 4039;
pub const BTRFS_SCRUB_READONLY: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_ALWAYS: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_AVOID: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_NEVER_STARTED: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_FINISHED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_CANCELED: u32 = 3;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED: u32 = 4;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_START: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_STATUS: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_CANCEL: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_RESULT: i32 = -1;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_ERROR: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NOT_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_ALREADY_STARTED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_SCRUB_INPROGRESS: u32 = 3;
pub const BTRFS_BALANCE_CTL_PAUSE: u32 = 1;
pub const BTRFS_BALANCE_CTL_CANCEL: u32 = 2;
pub const BTRFS_BALANCE_CTL_RESUME: u32 = 3;
pub const BTRFS_BALANCE_STATE_RUNNING: u32 = 1;
pub const BTRFS_BALANCE_STATE_PAUSE_REQ: u32 = 2;
pub const BTRFS_BALANCE_STATE_CANCEL_REQ: u32 = 4;
pub const BTRFS_INO_LOOKUP_PATH_MAX: u32 = 4080;
pub const BTRFS_INO_LOOKUP_USER_PATH_MAX: u32 = 3824;
pub const BTRFS_DEFRAG_RANGE_COMPRESS: u32 = 1;
pub const BTRFS_DEFRAG_RANGE_START_IO: u32 = 2;
pub const BTRFS_SAME_DATA_DIFFERS: u32 = 1;
pub const BTRFS_LOGICAL_INO_ARGS_IGNORE_OFFSET: u32 = 1;
pub const BTRFS_DEV_STATS_RESET: u32 = 1;
pub const BTRFS_QUOTA_CTL_ENABLE: u32 = 1;
pub const BTRFS_QUOTA_CTL_DISABLE: u32 = 2;
pub const BTRFS_IOC_SET_RECEIVED_SUBVOL_32_COMPAT_DEFINED: u32 = 1;
pub const BTRFS_SEND_FLAG_NO_FILE_DATA: u32 = 1;
pub const BTRFS_SEND_FLAG_OMIT_STREAM_HEADER: u32 = 2;
pub const BTRFS_SEND_FLAG_OMIT_END_CMD: u32 = 4;
pub const BTRFS_SEND_FLAG_VERSION: u32 = 8;
pub const BTRFS_SEND_FLAG_COMPRESSED: u32 = 16;
pub const BTRFS_SEND_FLAG_MASK: u32 = 31;
pub const BTRFS_IOC_SEND_64_COMPAT_DEFINED: u32 = 1;
pub const BTRFS_MAX_ROOTREF_BUFFER_NUM: u32 = 255;
pub const BTRFS_ENCODED_IO_COMPRESSION_NONE: u32 = 0;
pub const BTRFS_ENCODED_IO_COMPRESSION_ZLIB: u32 = 1;
pub const BTRFS_ENCODED_IO_COMPRESSION_ZSTD: u32 = 2;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_4K: u32 = 3;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_8K: u32 = 4;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_16K: u32 = 5;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_32K: u32 = 6;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_64K: u32 = 7;
pub const BTRFS_ENCODED_IO_COMPRESSION_TYPES: u32 = 8;
pub const BTRFS_ENCODED_IO_ENCRYPTION_NONE: u32 = 0;
pub const BTRFS_ENCODED_IO_ENCRYPTION_TYPES: u32 = 1;
pub const BTRFS_MAGIC: u64 = 5575266562640200287;
pub const BTRFS_MAGIC_TEMPORARY: u64 = 5575266562640200225;
pub const BTRFS_MAX_MIRRORS: u32 = 3;
pub const BTRFS_MAX_LEVEL: u32 = 8;
pub const BTRFS_ROOT_TREE_OBJECTID: u32 = 1;
pub const BTRFS_EXTENT_TREE_OBJECTID: u32 = 2;
pub const BTRFS_CHUNK_TREE_OBJECTID: u32 = 3;
pub const BTRFS_DEV_TREE_OBJECTID: u32 = 4;
pub const BTRFS_FS_TREE_OBJECTID: u32 = 5;
pub const BTRFS_ROOT_TREE_DIR_OBJECTID: u32 = 6;
pub const BTRFS_CSUM_TREE_OBJECTID: u32 = 7;
pub const BTRFS_QUOTA_TREE_OBJECTID: u32 = 8;
pub const BTRFS_UUID_TREE_OBJECTID: u32 = 9;
pub const BTRFS_FREE_SPACE_TREE_OBJECTID: u32 = 10;
pub const BTRFS_BLOCK_GROUP_TREE_OBJECTID: u32 = 11;
pub const BTRFS_DEV_STATS_OBJECTID: u32 = 0;
pub const BTRFS_BALANCE_OBJECTID: i32 = -4;
pub const BTRFS_ORPHAN_OBJECTID: i32 = -5;
pub const BTRFS_TREE_LOG_OBJECTID: i32 = -6;
pub const BTRFS_TREE_LOG_FIXUP_OBJECTID: i32 = -7;
pub const BTRFS_TREE_RELOC_OBJECTID: i32 = -8;
pub const BTRFS_DATA_RELOC_TREE_OBJECTID: i32 = -9;
pub const BTRFS_EXTENT_CSUM_OBJECTID: i32 = -10;
pub const BTRFS_FREE_SPACE_OBJECTID: i32 = -11;
pub const BTRFS_FREE_INO_OBJECTID: i32 = -12;
pub const BTRFS_MULTIPLE_OBJECTIDS: i32 = -255;
pub const BTRFS_FIRST_FREE_OBJECTID: u32 = 256;
pub const BTRFS_LAST_FREE_OBJECTID: i32 = -256;
pub const BTRFS_FIRST_CHUNK_TREE_OBJECTID: u32 = 256;
pub const BTRFS_DEV_ITEMS_OBJECTID: u32 = 1;
pub const BTRFS_EMPTY_SUBVOL_DIR_OBJECTID: u32 = 2;
pub const BTRFS_MAX_METADATA_BLOCKSIZE: u32 = 65536;
pub const BTRFS_NAME_LEN: u32 = 255;
pub const BTRFS_LINK_MAX: u32 = 65535;
pub const BTRFS_CSUM_SIZE: u32 = 32;
pub const BTRFS_EMPTY_DIR_SIZE: u32 = 0;
pub const BTRFS_FT_UNKNOWN: u32 = 0;
pub const BTRFS_FT_REG_FILE: u32 = 1;
pub const BTRFS_FT_DIR: u32 = 2;
pub const BTRFS_FT_CHRDEV: u32 = 3;
pub const BTRFS_FT_BLKDEV: u32 = 4;
pub const BTRFS_FT_FIFO: u32 = 5;
pub const BTRFS_FT_SOCK: u32 = 6;
pub const BTRFS_FT_SYMLINK: u32 = 7;
pub const BTRFS_FT_XATTR: u32 = 8;
pub const BTRFS_FT_MAX: u32 = 9;
pub const BTRFS_ROOT_SUBVOL_RDONLY: u32 = 1;
pub const BTRFS_FREE_SPACE_EXTENT: u32 = 1;
pub const BTRFS_FREE_SPACE_BITMAP: u32 = 2;
pub const BTRFS_HEADER_FLAG_WRITTEN: u32 = 1;
pub const BTRFS_HEADER_FLAG_RELOC: u32 = 2;
pub const BTRFS_SUPER_FLAG_SEEDING: u64 = 4294967296;
pub const BTRFS_SUPER_FLAG_METADUMP: u64 = 8589934592;
pub const BTRFS_SUPER_FLAG_METADUMP_V2: u64 = 17179869184;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID: u64 = 34359738368;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID_V2: u64 = 68719476736;
pub const BTRFS_SUPER_FLAG_CHANGING_CSUM: u64 = 137438953472;
pub const BTRFS_BACKREF_REV_MAX: u32 = 256;
pub const BTRFS_BACKREF_REV_SHIFT: u32 = 56;
pub const BTRFS_OLD_BACKREF_REV: u32 = 0;
pub const BTRFS_MIXED_BACKREF_REV: u32 = 1;
pub const BTRFS_SYSTEM_CHUNK_ARRAY_SIZE: u32 = 2048;
pub const BTRFS_LABEL_SIZE: u32 = 256;
pub const BTRFS_NUM_BACKUP_ROOTS: u32 = 4;
pub const BTRFS_SUPER_INFO_OFFSET: u32 = 65536;
pub const BTRFS_SUPER_INFO_SIZE: u32 = 4096;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE: u32 = 1;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE_VALID: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_BACKREF: u32 = 1;
pub const BTRFS_FEATURE_INCOMPAT_DEFAULT_SUBVOL: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_GROUPS: u32 = 4;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_LZO: u32 = 8;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_ZSTD: u32 = 16;
pub const BTRFS_FEATURE_INCOMPAT_BIG_METADATA: u32 = 32;
pub const BTRFS_FEATURE_INCOMPAT_EXTENDED_IREF: u32 = 64;
pub const BTRFS_FEATURE_INCOMPAT_RAID56: u32 = 128;
pub const BTRFS_FEATURE_INCOMPAT_SKINNY_METADATA: u32 = 256;
pub const BTRFS_FEATURE_INCOMPAT_NO_HOLES: u32 = 512;
pub const BTRFS_FEATURE_INCOMPAT_METADATA_UUID: u32 = 1024;
pub const BTRFS_FEATURE_INCOMPAT_RAID1C34: u32 = 2048;
pub const BTRFS_FEATURE_INCOMPAT_ZONED: u32 = 4096;
pub const BTRFS_FEATURE_INCOMPAT_EXTENT_TREE_V2: u32 = 8192;
pub const BTRFS_FEATURE_COMPAT_SUPP: u32 = 0;
pub const BTRFS_FEATURE_COMPAT_RO_SUPP: u32 = 3;
pub const BTRFS_FEATURE_INCOMPAT_SUPP: u32 = 8191;
pub const BTRFS_MAX_EXTENT_SIZE: u32 = 134217728;
pub const BTRFS_EXTENT_FLAG_DATA: u32 = 1;
pub const BTRFS_EXTENT_FLAG_TREE_BLOCK: u32 = 2;
pub const BTRFS_BLOCK_FLAG_FULL_BACKREF: u32 = 256;
pub const BTRFS_FILE_EXTENT_INLINE: u32 = 0;
pub const BTRFS_FILE_EXTENT_REG: u32 = 1;
pub const BTRFS_FILE_EXTENT_PREALLOC: u32 = 2;
pub const BTRFS_BLOCK_GROUP_DATA: u32 = 1;
pub const BTRFS_BLOCK_GROUP_SYSTEM: u32 = 2;
pub const BTRFS_BLOCK_GROUP_METADATA: u32 = 4;
pub const BTRFS_BLOCK_GROUP_RAID0: u32 = 8;
pub const BTRFS_BLOCK_GROUP_RAID1: u32 = 16;
pub const BTRFS_BLOCK_GROUP_DUP: u32 = 32;
pub const BTRFS_BLOCK_GROUP_RAID10: u32 = 64;
pub const BTRFS_BLOCK_GROUP_RAID5: u32 = 128;
pub const BTRFS_BLOCK_GROUP_RAID6: u32 = 256;
pub const BTRFS_BLOCK_GROUP_RAID1C3: u32 = 512;
pub const BTRFS_BLOCK_GROUP_RAID1C4: u32 = 1024;
pub const BTRFS_BLOCK_GROUP_TYPE_MASK: u32 = 7;
pub const BTRFS_BLOCK_GROUP_PROFILE_MASK: u32 = 2040;
pub const BTRFS_BLOCK_GROUP_RAID56_MASK: u32 = 384;
pub const BTRFS_BLOCK_GROUP_RAID1_MASK: u32 = 1552;
pub const BTRFS_AVAIL_ALLOC_BIT_SINGLE: u64 = 281474976710656;
pub const BTRFS_EXTENDED_PROFILE_MASK: u64 = 281474976712696;
pub const BTRFS_SPACE_INFO_GLOBAL_RSV: u64 = 562949953421312;
pub const BTRFS_QGROUP_LEVEL_SHIFT: u32 = 48;
pub const BTRFS_QGROUP_STATUS_FLAG_ON: u32 = 1;
pub const BTRFS_QGROUP_STATUS_FLAG_RESCAN: u32 = 2;
pub const BTRFS_QGROUP_STATUS_FLAG_INCONSISTENT: u32 = 4;
pub const BTRFS_QGROUP_STATUS_VERSION: u32 = 1;
pub const BTRFS_FREE_SPACE_USING_BITMAPS: u32 = 1;
pub const BTRFS_QGROUP_LIMIT_MAX_RFER: u32 = 1;
pub const BTRFS_QGROUP_LIMIT_MAX_EXCL: u32 = 2;
pub const BTRFS_QGROUP_LIMIT_RSV_RFER: u32 = 4;
pub const BTRFS_QGROUP_LIMIT_RSV_EXCL: u32 = 8;
pub const BTRFS_QGROUP_LIMIT_RFER_CMPR: u32 = 16;
pub const BTRFS_QGROUP_LIMIT_EXCL_CMPR: u32 = 32;
pub const BTRFS_INODE_ITEM_KEY: u32 = 1;
pub const BTRFS_INODE_REF_KEY: u32 = 12;
pub const BTRFS_INODE_EXTREF_KEY: u32 = 13;
pub const BTRFS_XATTR_ITEM_KEY: u32 = 24;
pub const BTRFS_VERITY_DESC_ITEM_KEY: u32 = 36;
pub const BTRFS_VERITY_MERKLE_ITEM_KEY: u32 = 37;
pub const BTRFS_ORPHAN_ITEM_KEY: u32 = 48;
pub const BTRFS_DIR_LOG_ITEM_KEY: u32 = 60;
pub const BTRFS_DIR_LOG_INDEX_KEY: u32 = 72;
pub const BTRFS_DIR_ITEM_KEY: u32 = 84;
pub const BTRFS_DIR_INDEX_KEY: u32 = 96;
pub const BTRFS_EXTENT_DATA_KEY: u32 = 108;
pub const BTRFS_CSUM_ITEM_KEY: u32 = 120;
pub const BTRFS_EXTENT_CSUM_KEY: u32 = 128;
pub const BTRFS_ROOT_ITEM_KEY: u32 = 132;
pub const BTRFS_ROOT_BACKREF_KEY: u32 = 144;
pub const BTRFS_ROOT_REF_KEY: u32 = 156;
pub const BTRFS_EXTENT_ITEM_KEY: u32 = 168;
pub const BTRFS_METADATA_ITEM_KEY: u32 = 169;
pub const BTRFS_TREE_BLOCK_REF_KEY: u32 = 176;
pub const BTRFS_EXTENT_DATA_REF_KEY: u32 = 178;
pub const BTRFS_EXTENT_REF_V0_KEY: u32 = 180;
pub const BTRFS_SHARED_BLOCK_REF_KEY: u32 = 182;
pub const BTRFS_SHARED_DATA_REF_KEY: u32 = 184;
pub const BTRFS_BLOCK_GROUP_ITEM_KEY: u32 = 192;
pub const BTRFS_FREE_SPACE_INFO_KEY: u32 = 198;
pub const BTRFS_FREE_SPACE_EXTENT_KEY: u32 = 199;
pub const BTRFS_FREE_SPACE_BITMAP_KEY: u32 = 200;
pub const BTRFS_DEV_EXTENT_KEY: u32 = 204;
pub const BTRFS_DEV_ITEM_KEY: u32 = 216;
pub const BTRFS_CHUNK_ITEM_KEY: u32 = 228;
pub const BTRFS_BALANCE_ITEM_KEY: u32 = 248;
pub const BTRFS_QGROUP_STATUS_KEY: u32 = 240;
pub const BTRFS_QGROUP_INFO_KEY: u32 = 242;
pub const BTRFS_QGROUP_LIMIT_KEY: u32 = 244;
pub const BTRFS_QGROUP_RELATION_KEY: u32 = 246;
pub const BTRFS_TEMPORARY_ITEM_KEY: u32 = 248;
pub const BTRFS_DEV_STATS_KEY: u32 = 249;
pub const BTRFS_PERSISTENT_ITEM_KEY: u32 = 249;
pub const BTRFS_DEV_REPLACE_KEY: u32 = 250;
pub const BTRFS_UUID_KEY_SUBVOL: u32 = 251;
pub const BTRFS_UUID_KEY_RECEIVED_SUBVOL: u32 = 252;
pub const BTRFS_STRING_ITEM_KEY: u32 = 253;
pub const BTRFS_INODE_NODATASUM: u32 = 1;
pub const BTRFS_INODE_NODATACOW: u32 = 2;
pub const BTRFS_INODE_READONLY: u32 = 4;
pub const BTRFS_INODE_NOCOMPRESS: u32 = 8;
pub const BTRFS_INODE_PREALLOC: u32 = 16;
pub const BTRFS_INODE_SYNC: u32 = 32;
pub const BTRFS_INODE_IMMUTABLE: u32 = 64;
pub const BTRFS_INODE_APPEND: u32 = 128;
pub const BTRFS_INODE_NODUMP: u32 = 256;
pub const BTRFS_INODE_NOATIME: u32 = 512;
pub const BTRFS_INODE_DIRSYNC: u32 = 1024;
pub const BTRFS_INODE_COMPRESS: u32 = 2048;
pub const BTRFS_SEND_STREAM_MAGIC: &[u8; 13] = b"btrfs-stream\0";
pub const BTRFS_SEND_STREAM_VERSION: u32 = 1;
pub const BTRFS_SEND_BUF_SIZE: u32 = 65536;
pub const BTRFS_SEND_READ_SIZE: u32 = 49152;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __le16 = __u16;
pub type __le32 = __u32;
pub type __le64 = __u64;
pub type u32_ = __u32;
pub type u64_ = __u64;
pub type u16_ = __u16;
pub type u8_ = __u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
#[test]
fn bindgen_test_layout_list_head() {
    const UNINIT: ::std::mem::MaybeUninit<list_head> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<list_head>(),
        16usize,
        concat!("Size of: ", stringify!(list_head))
    );
    assert_eq!(
        ::std::mem::align_of::<list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(list_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for list_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: ::std::os::raw::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
#[test]
fn bindgen_test_layout_rb_node() {
    const UNINIT: ::std::mem::MaybeUninit<rb_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rb_node>(),
        24usize,
        concat!("Size of: ", stringify!(rb_node))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_node>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rb_parent_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(__rb_parent_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(rb_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_left) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(rb_left)
        )
    );
}
impl Default for rb_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
#[test]
fn bindgen_test_layout_rb_root() {
    const UNINIT: ::std::mem::MaybeUninit<rb_root> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rb_root>(),
        8usize,
        concat!("Size of: ", stringify!(rb_root))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_root>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_root))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_root),
            "::",
            stringify!(rb_node)
        )
    );
}
impl Default for rb_root {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args {
    pub fd: __s64,
    pub name: [::std::os::raw::c_char; 4088usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_vol_args> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_vol_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_vol_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args),
            "::",
            stringify!(name)
        )
    );
}
impl Default for btrfs_ioctl_vol_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_qgroup_limit {
    pub flags: __u64,
    pub max_referenced: __u64,
    pub max_exclusive: __u64,
    pub rsv_referenced: __u64,
    pub rsv_exclusive: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_limit() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_qgroup_limit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_limit>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_limit>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_referenced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(max_referenced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_exclusive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(max_exclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_referenced) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(rsv_referenced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_exclusive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(rsv_exclusive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct btrfs_qgroup_inherit {
    pub flags: __u64,
    pub num_qgroups: __u64,
    pub num_ref_copies: __u64,
    pub num_excl_copies: __u64,
    pub lim: btrfs_qgroup_limit,
    pub qgroups: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_inherit() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_qgroup_inherit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_inherit>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_inherit))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_inherit>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_inherit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_qgroups) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_qgroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ref_copies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_ref_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_excl_copies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_excl_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lim) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(lim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qgroups) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(qgroups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_limit_args {
    pub qgroupid: __u64,
    pub lim: btrfs_qgroup_limit,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_limit_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_qgroup_limit_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_limit_args>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_limit_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_limit_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_limit_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qgroupid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_limit_args),
            "::",
            stringify!(qgroupid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_limit_args),
            "::",
            stringify!(lim)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2 {
    pub fd: __s64,
    pub transid: __u64,
    pub flags: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1,
    pub __bindgen_anon_2: btrfs_ioctl_vol_args_v2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_1 {
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1,
    pub unused: [__u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1 {
    pub size: __u64,
    pub qgroup_inherit: *mut btrfs_qgroup_inherit,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qgroup_inherit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(qgroup_inherit)
        )
    );
}
impl Default for btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_vol_args_v2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_ioctl_vol_args_v2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_2 {
    pub name: [::std::os::raw::c_char; 4040usize],
    pub devid: __u64,
    pub subvolid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_vol_args_v2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>(),
        4040usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subvolid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2),
            "::",
            stringify!(subvolid)
        )
    );
}
impl Default for btrfs_ioctl_vol_args_v2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_vol_args_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_vol_args_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_vol_args_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for btrfs_ioctl_vol_args_v2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_scrub_progress {
    pub data_extents_scrubbed: __u64,
    pub tree_extents_scrubbed: __u64,
    pub data_bytes_scrubbed: __u64,
    pub tree_bytes_scrubbed: __u64,
    pub read_errors: __u64,
    pub csum_errors: __u64,
    pub verify_errors: __u64,
    pub no_csum: __u64,
    pub csum_discards: __u64,
    pub super_errors: __u64,
    pub malloc_errors: __u64,
    pub uncorrectable_errors: __u64,
    pub corrected_errors: __u64,
    pub last_physical: __u64,
    pub unverified_errors: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_scrub_progress() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_scrub_progress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_scrub_progress>(),
        120usize,
        concat!("Size of: ", stringify!(btrfs_scrub_progress))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_scrub_progress>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_scrub_progress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_extents_scrubbed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(data_extents_scrubbed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_extents_scrubbed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(tree_extents_scrubbed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_bytes_scrubbed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(data_bytes_scrubbed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_bytes_scrubbed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(tree_bytes_scrubbed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_errors) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(read_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_errors) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(csum_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify_errors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(verify_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_csum) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(no_csum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_discards) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(csum_discards)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_errors) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(super_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc_errors) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(malloc_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uncorrectable_errors) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(uncorrectable_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corrected_errors) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(corrected_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_physical) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(last_physical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unverified_errors) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(unverified_errors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_scrub_args {
    pub devid: __u64,
    pub start: __u64,
    pub end: __u64,
    pub flags: __u64,
    pub progress: btrfs_scrub_progress,
    pub unused: [__u64; 109usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_scrub_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_scrub_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_scrub_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_scrub_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_scrub_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_scrub_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_ioctl_scrub_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_start_params {
    pub srcdevid: __u64,
    pub cont_reading_from_srcdev_mode: __u64,
    pub srcdev_name: [__u8; 1025usize],
    pub tgtdev_name: [__u8; 1025usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_start_params() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_dev_replace_start_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_start_params>(),
        2072usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_start_params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_start_params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_start_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcdevid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(srcdevid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cont_reading_from_srcdev_mode) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(cont_reading_from_srcdev_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcdev_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(srcdev_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tgtdev_name) as usize - ptr as usize },
        1041usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(tgtdev_name)
        )
    );
}
impl Default for btrfs_ioctl_dev_replace_start_params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_status_params {
    pub replace_state: __u64,
    pub progress_1000: __u64,
    pub time_started: __u64,
    pub time_stopped: __u64,
    pub num_write_errors: __u64,
    pub num_uncorrectable_read_errors: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_status_params() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_dev_replace_status_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_status_params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_status_params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_status_params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_status_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replace_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(replace_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_1000) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(progress_1000)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_started) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(time_started)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_stopped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(time_stopped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_write_errors) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(num_write_errors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_uncorrectable_read_errors) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(num_uncorrectable_read_errors)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_args {
    pub cmd: __u64,
    pub result: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_dev_replace_args__bindgen_ty_1,
    pub spare: [__u64; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_dev_replace_args__bindgen_ty_1 {
    pub start: btrfs_ioctl_dev_replace_start_params,
    pub status: btrfs_ioctl_dev_replace_status_params,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_args__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_dev_replace_args__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>(),
        2072usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
}
impl Default for btrfs_ioctl_dev_replace_args__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_dev_replace_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_args>(),
        2600usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_dev_replace_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_dev_replace_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(spare)
        )
    );
}
impl Default for btrfs_ioctl_dev_replace_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_info_args {
    pub devid: __u64,
    pub uuid: [__u8; 16usize],
    pub bytes_used: __u64,
    pub total_bytes: __u64,
    pub unused: [__u64; 379usize],
    pub path: [__u8; 1024usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_info_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_dev_info_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_info_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_dev_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_info_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_dev_info_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(path)
        )
    );
}
impl Default for btrfs_ioctl_dev_info_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_fs_info_args {
    pub max_id: __u64,
    pub num_devices: __u64,
    pub fsid: [__u8; 16usize],
    pub nodesize: __u32,
    pub sectorsize: __u32,
    pub clone_alignment: __u32,
    pub reserved32: __u32,
    pub reserved: [__u64; 122usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_fs_info_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_fs_info_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_fs_info_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_fs_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_fs_info_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_fs_info_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(max_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_devices) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(num_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodesize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectorsize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(sectorsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_alignment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(clone_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved32) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(reserved32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for btrfs_ioctl_fs_info_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_feature_flags {
    pub compat_flags: __u64,
    pub compat_ro_flags: __u64,
    pub incompat_flags: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_feature_flags() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_feature_flags> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_feature_flags>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_feature_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_feature_flags>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_feature_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compat_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(compat_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compat_ro_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(compat_ro_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incompat_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(incompat_flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_args {
    pub profiles: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1,
    pub devid: __u64,
    pub pstart: __u64,
    pub pend: __u64,
    pub vstart: __u64,
    pub vend: __u64,
    pub target: __u64,
    pub flags: __u64,
    pub __bindgen_anon_2: btrfs_balance_args__bindgen_ty_2,
    pub stripes_min: __u32,
    pub stripes_max: __u32,
    pub unused: [__u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_1 {
    pub usage: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __u32,
    pub usage_max: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_args__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_balance_args__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for btrfs_balance_args__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_2 {
    pub limit: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __u32,
    pub limit_max: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_args__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_balance_args__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for btrfs_balance_args__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_balance_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_args> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args>(),
        136usize,
        concat!("Size of: ", stringify!(btrfs_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_balance_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profiles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstart) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(pstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pend) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(pend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vstart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(vstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vend) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(vend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripes_min) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(stripes_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripes_max) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(stripes_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_balance_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_balance_progress {
    pub expected: __u64,
    pub considered: __u64,
    pub completed: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_balance_progress() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_progress> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_progress>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_balance_progress))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_progress>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_balance_progress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expected) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(expected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).considered) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(considered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(completed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_balance_args {
    pub flags: __u64,
    pub state: __u64,
    pub data: btrfs_balance_args,
    pub meta: btrfs_balance_args,
    pub sys: btrfs_balance_args,
    pub stat: btrfs_balance_progress,
    pub unused: [__u64; 72usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_balance_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_balance_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_balance_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_balance_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_balance_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_ioctl_balance_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_args {
    pub treeid: __u64,
    pub objectid: __u64,
    pub name: [::std::os::raw::c_char; 4080usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_lookup_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_ino_lookup_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_lookup_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_lookup_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_lookup_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_ino_lookup_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(name)
        )
    );
}
impl Default for btrfs_ioctl_ino_lookup_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_user_args {
    pub dirid: __u64,
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub path: [::std::os::raw::c_char; 3824usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_lookup_user_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_ino_lookup_user_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_lookup_user_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_lookup_user_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_lookup_user_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_ino_lookup_user_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treeid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(path)
        )
    );
}
impl Default for btrfs_ioctl_ino_lookup_user_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_search_key {
    pub tree_id: __u64,
    pub min_objectid: __u64,
    pub max_objectid: __u64,
    pub min_offset: __u64,
    pub max_offset: __u64,
    pub min_transid: __u64,
    pub max_transid: __u64,
    pub min_type: __u32,
    pub max_type: __u32,
    pub nr_items: __u32,
    pub unused: __u32,
    pub unused1: __u64,
    pub unused2: __u64,
    pub unused3: __u64,
    pub unused4: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_key() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_search_key> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_key>(),
        104usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_key>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(tree_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_objectid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_transid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_transid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_type) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_type) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_items) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(nr_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused2) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused4) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_search_header {
    pub transid: __u64,
    pub objectid: __u64,
    pub offset: __u64,
    pub type_: __u32,
    pub len: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_search_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_header>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_header>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_args {
    pub key: btrfs_ioctl_search_key,
    pub buf: [::std::os::raw::c_char; 3992usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_search_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args),
            "::",
            stringify!(buf)
        )
    );
}
impl Default for btrfs_ioctl_search_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct btrfs_ioctl_search_args_v2 {
    pub key: btrfs_ioctl_search_key,
    pub buf_size: __u64,
    pub buf: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_args_v2() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_search_args_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_args_v2>(),
        112usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_args_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_args_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_args_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_clone_range_args {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_clone_range_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_clone_range_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_clone_range_args>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_clone_range_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_clone_range_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_clone_range_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(dest_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_same_extent_info {
    pub fd: __s64,
    pub logical_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_same_extent_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_same_extent_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_same_extent_info>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_same_extent_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_same_extent_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_same_extent_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(logical_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_deduped) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(bytes_deduped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct btrfs_ioctl_same_args {
    pub logical_offset: __u64,
    pub length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<btrfs_ioctl_same_extent_info>,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_same_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_same_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_same_args>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_same_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_same_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_same_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(logical_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(dest_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_defrag_range_args {
    pub start: __u64,
    pub len: __u64,
    pub flags: __u64,
    pub extent_thresh: __u32,
    pub compress_type: __u32,
    pub unused: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_defrag_range_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_defrag_range_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_defrag_range_args>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_defrag_range_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_defrag_range_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_defrag_range_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_thresh) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(extent_thresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compress_type) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(compress_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_space_info {
    pub flags: __u64,
    pub total_bytes: __u64,
    pub used_bytes: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_space_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_space_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_space_info>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_space_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_space_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_space_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(used_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct btrfs_ioctl_space_args {
    pub space_slots: __u64,
    pub total_spaces: __u64,
    pub spaces: __IncompleteArrayField<btrfs_ioctl_space_info>,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_space_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_space_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_space_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_space_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_space_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_space_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_slots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(space_slots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_spaces) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(total_spaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaces) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(spaces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct btrfs_data_container {
    pub bytes_left: __u32,
    pub bytes_missing: __u32,
    pub elem_cnt: __u32,
    pub elem_missed: __u32,
    pub val: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_btrfs_data_container() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_data_container> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_data_container>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_data_container))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_data_container>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_data_container))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(bytes_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_missing) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(bytes_missing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(elem_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_missed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(elem_missed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_ino_path_args {
    pub inum: __u64,
    pub size: __u64,
    pub reserved: [__u64; 4usize],
    pub fspath: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_path_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_ino_path_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_path_args>(),
        56usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_path_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_path_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_ino_path_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(inum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fspath) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(fspath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_logical_ino_args {
    pub logical: __u64,
    pub size: __u64,
    pub reserved: [__u64; 3usize],
    pub flags: __u64,
    pub inodes: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_logical_ino_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_logical_ino_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_logical_ino_args>(),
        56usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_logical_ino_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_logical_ino_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_logical_ino_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(logical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inodes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(inodes)
        )
    );
}
pub const BTRFS_DEV_STAT_WRITE_ERRS: btrfs_dev_stat_values = 0;
pub const BTRFS_DEV_STAT_READ_ERRS: btrfs_dev_stat_values = 1;
pub const BTRFS_DEV_STAT_FLUSH_ERRS: btrfs_dev_stat_values = 2;
pub const BTRFS_DEV_STAT_CORRUPTION_ERRS: btrfs_dev_stat_values = 3;
pub const BTRFS_DEV_STAT_GENERATION_ERRS: btrfs_dev_stat_values = 4;
pub const BTRFS_DEV_STAT_VALUES_MAX: btrfs_dev_stat_values = 5;
pub type btrfs_dev_stat_values = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_dev_stats {
    pub devid: __u64,
    pub nr_items: __u64,
    pub flags: __u64,
    pub values: [__u64; 5usize],
    pub unused: [__u64; 121usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_dev_stats() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_get_dev_stats> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_dev_stats>(),
        1032usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_dev_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_get_dev_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_items) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(nr_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_ioctl_get_dev_stats {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_quota_ctl_args {
    pub cmd: __u64,
    pub status: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_quota_ctl_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_quota_ctl_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_quota_ctl_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_quota_ctl_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_quota_ctl_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_quota_ctl_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_ctl_args),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_ctl_args),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_quota_rescan_args {
    pub flags: __u64,
    pub progress: __u64,
    pub reserved: [__u64; 6usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_quota_rescan_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_quota_rescan_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_quota_rescan_args>(),
        64usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_quota_rescan_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_quota_rescan_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_quota_rescan_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_assign_args {
    pub assign: __u64,
    pub src: __u64,
    pub dst: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_assign_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_qgroup_assign_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_assign_args>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_assign_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_assign_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_assign_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(assign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(dst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_create_args {
    pub create: __u64,
    pub qgroupid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_create_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_qgroup_create_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_create_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_create_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_create_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_create_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_create_args),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qgroupid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_create_args),
            "::",
            stringify!(qgroupid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_timespec {
    pub sec: __u64,
    pub nsec: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec),
            "::",
            stringify!(nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_received_subvol_args {
    pub uuid: [::std::os::raw::c_char; 16usize],
    pub stransid: __u64,
    pub rtransid: __u64,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub flags: __u64,
    pub reserved: [__u64; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_received_subvol_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_received_subvol_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_received_subvol_args>(),
        200usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_received_subvol_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_received_subvol_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_received_subvol_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stransid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtransid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_timespec_32 {
    pub sec: __u64,
    pub nsec: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_timespec_32() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_timespec_32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_timespec_32>(),
        12usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_timespec_32))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_timespec_32>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_timespec_32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec_32),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec_32),
            "::",
            stringify!(nsec)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_received_subvol_args_32 {
    pub uuid: [::std::os::raw::c_char; 16usize],
    pub stransid: __u64,
    pub rtransid: __u64,
    pub stime: btrfs_ioctl_timespec_32,
    pub rtime: btrfs_ioctl_timespec_32,
    pub flags: __u64,
    pub reserved: [__u64; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_received_subvol_args_32() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_received_subvol_args_32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_received_subvol_args_32>(),
        192usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_received_subvol_args_32))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_received_subvol_args_32>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_received_subvol_args_32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stransid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtransid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtime) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args_32),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_send_args {
    pub send_fd: __s64,
    pub clone_sources_count: __u64,
    pub clone_sources: *mut __u64,
    pub parent_root: __u64,
    pub flags: __u64,
    pub version: __u32,
    pub reserved: [__u8; 28usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_send_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_send_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_send_args>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_send_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_send_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_send_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(send_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_sources_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(clone_sources_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_sources) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(clone_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(parent_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for btrfs_ioctl_send_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_send_args_64 {
    pub send_fd: __s64,
    pub clone_sources_count: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_send_args_64__bindgen_ty_1,
    pub parent_root: __u64,
    pub flags: __u64,
    pub reserved: [__u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_send_args_64__bindgen_ty_1 {
    pub clone_sources: *mut __u64,
    pub __clone_sources_alignment: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_send_args_64__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_send_args_64__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_send_args_64__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_send_args_64__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_send_args_64__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_send_args_64__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_sources) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64__bindgen_ty_1),
            "::",
            stringify!(clone_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clone_sources_alignment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64__bindgen_ty_1),
            "::",
            stringify!(__clone_sources_alignment)
        )
    );
}
impl Default for btrfs_ioctl_send_args_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_send_args_64() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_send_args_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_send_args_64>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_send_args_64))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_send_args_64>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_send_args_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64),
            "::",
            stringify!(send_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_sources_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64),
            "::",
            stringify!(clone_sources_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64),
            "::",
            stringify!(parent_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args_64),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for btrfs_ioctl_send_args_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_info_args {
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub parent_id: __u64,
    pub dirid: __u64,
    pub generation: __u64,
    pub flags: __u64,
    pub uuid: [__u8; 16usize],
    pub parent_uuid: [__u8; 16usize],
    pub received_uuid: [__u8; 16usize],
    pub ctransid: __u64,
    pub otransid: __u64,
    pub stransid: __u64,
    pub rtransid: __u64,
    pub ctime: btrfs_ioctl_timespec,
    pub otime: btrfs_ioctl_timespec,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub reserved: [__u64; 8usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_info_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_get_subvol_info_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_info_args>(),
        504usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_subvol_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_info_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_info_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_id) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(parent_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirid) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_uuid) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(parent_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_uuid) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(received_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctransid) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(ctransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otransid) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(otransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stransid) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtransid) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otime) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(otime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stime) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtime) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for btrfs_ioctl_get_subvol_info_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args {
    pub min_treeid: __u64,
    pub rootref: [btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1; 255usize],
    pub num_items: __u8,
    pub align: [__u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1 {
    pub treeid: __u64,
    pub dirid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1),
            "::",
            stringify!(dirid)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_rootref_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_get_subvol_rootref_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_subvol_rootref_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_treeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(min_treeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootref) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(rootref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_items) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        4089usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(align)
        )
    );
}
impl Default for btrfs_ioctl_get_subvol_rootref_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_encoded_io_args {
    pub iov: *mut iovec,
    pub iovcnt: ::std::os::raw::c_ulong,
    pub offset: __s64,
    pub flags: __u64,
    pub len: __u64,
    pub unencoded_len: __u64,
    pub unencoded_offset: __u64,
    pub compression: __u32,
    pub encryption: __u32,
    pub reserved: [__u8; 64usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_encoded_io_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_ioctl_encoded_io_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_encoded_io_args>(),
        128usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_encoded_io_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_encoded_io_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_encoded_io_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iovcnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(iovcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unencoded_len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(unencoded_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unencoded_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(unencoded_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryption) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(encryption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_encoded_io_args),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for btrfs_ioctl_encoded_io_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const notused: btrfs_err_code = 0;
pub const BTRFS_ERROR_DEV_RAID1_MIN_NOT_MET: btrfs_err_code = 1;
pub const BTRFS_ERROR_DEV_RAID10_MIN_NOT_MET: btrfs_err_code = 2;
pub const BTRFS_ERROR_DEV_RAID5_MIN_NOT_MET: btrfs_err_code = 3;
pub const BTRFS_ERROR_DEV_RAID6_MIN_NOT_MET: btrfs_err_code = 4;
pub const BTRFS_ERROR_DEV_TGT_REPLACE: btrfs_err_code = 5;
pub const BTRFS_ERROR_DEV_MISSING_NOT_FOUND: btrfs_err_code = 6;
pub const BTRFS_ERROR_DEV_ONLY_WRITABLE: btrfs_err_code = 7;
pub const BTRFS_ERROR_DEV_EXCL_RUN_IN_PROGRESS: btrfs_err_code = 8;
pub const BTRFS_ERROR_DEV_RAID1C3_MIN_NOT_MET: btrfs_err_code = 9;
pub const BTRFS_ERROR_DEV_RAID1C4_MIN_NOT_MET: btrfs_err_code = 10;
pub type btrfs_err_code = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_trans_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_ctl {
    _unused: [u8; 0],
}
pub const BTRFS_CSUM_TYPE_CRC32: btrfs_csum_type = 0;
pub const BTRFS_CSUM_TYPE_XXHASH: btrfs_csum_type = 1;
pub const BTRFS_CSUM_TYPE_SHA256: btrfs_csum_type = 2;
pub const BTRFS_CSUM_TYPE_BLAKE2: btrfs_csum_type = 3;
pub type btrfs_csum_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_disk_key {
    pub objectid: __le64,
    pub type_: u8_,
    pub offset: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_disk_key() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_key>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_disk_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_key>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_disk_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_key {
    pub objectid: u64_,
    pub type_: u8_,
    pub offset: u64_,
}
#[test]
fn bindgen_test_layout_btrfs_key() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_key>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_key>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_tree {
    pub root: rb_root,
}
#[test]
fn bindgen_test_layout_cache_tree() {
    const UNINIT: ::std::mem::MaybeUninit<cache_tree> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cache_tree>(),
        8usize,
        concat!("Size of: ", stringify!(cache_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<cache_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(cache_tree))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_tree),
            "::",
            stringify!(root)
        )
    );
}
impl Default for cache_tree {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_extent {
    pub rb_node: rb_node,
    pub objectid: u64_,
    pub start: u64_,
    pub size: u64_,
}
#[test]
fn bindgen_test_layout_cache_extent() {
    const UNINIT: ::std::mem::MaybeUninit<cache_extent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cache_extent>(),
        48usize,
        concat!("Size of: ", stringify!(cache_extent))
    );
    assert_eq!(
        ::std::mem::align_of::<cache_extent>(),
        8usize,
        concat!("Alignment of ", stringify!(cache_extent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_extent),
            "::",
            stringify!(rb_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_extent),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_extent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_extent),
            "::",
            stringify!(size)
        )
    );
}
impl Default for cache_extent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extent_io_tree {
    pub state: cache_tree,
    pub cache: cache_tree,
    pub lru: list_head,
    pub cache_size: u64_,
    pub max_cache_size: u64_,
}
#[test]
fn bindgen_test_layout_extent_io_tree() {
    const UNINIT: ::std::mem::MaybeUninit<extent_io_tree> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extent_io_tree>(),
        48usize,
        concat!("Size of: ", stringify!(extent_io_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<extent_io_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(extent_io_tree))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_io_tree),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_io_tree),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lru) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_io_tree),
            "::",
            stringify!(lru)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_io_tree),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cache_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_io_tree),
            "::",
            stringify!(max_cache_size)
        )
    );
}
impl Default for extent_io_tree {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct extent_buffer {
    pub cache_node: cache_extent,
    pub start: u64_,
    pub lru: list_head,
    pub recow: list_head,
    pub len: u32_,
    pub refs: ::std::os::raw::c_int,
    pub flags: u32_,
    pub fs_info: *mut btrfs_fs_info,
    pub data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_extent_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<extent_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extent_buffer>(),
        112usize,
        concat!("Size of: ", stringify!(extent_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<extent_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(extent_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(cache_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lru) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(lru)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recow) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(recow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_info) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(fs_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(extent_buffer),
            "::",
            stringify!(data)
        )
    );
}
impl Default for extent_buffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_mapping_tree {
    pub cache_tree: cache_tree,
}
#[test]
fn bindgen_test_layout_btrfs_mapping_tree() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_mapping_tree> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_mapping_tree>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_mapping_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_mapping_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_mapping_tree))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_tree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_mapping_tree),
            "::",
            stringify!(cache_tree)
        )
    );
}
impl Default for btrfs_mapping_tree {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_dev_item {
    pub devid: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub type_: __le64,
    pub generation: __le64,
    pub start_offset: __le64,
    pub dev_group: __le32,
    pub seek_speed: u8_,
    pub bandwidth: u8_,
    pub uuid: [u8_; 16usize],
    pub fsid: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_dev_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_item>(),
        98usize,
        concat!("Size of: ", stringify!(btrfs_dev_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_align) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(io_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_width) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(io_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_offset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(start_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_group) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(dev_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek_speed) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(seek_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bandwidth) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(bandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(fsid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_stripe {
    pub devid: __le64,
    pub offset: __le64,
    pub dev_uuid: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_stripe() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_stripe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_stripe>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_stripe))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_stripe>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_stripe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(dev_uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_chunk {
    pub length: __le64,
    pub owner: __le64,
    pub stripe_len: __le64,
    pub type_: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub num_stripes: __le16,
    pub sub_stripes: __le16,
    pub stripe: btrfs_stripe,
}
#[test]
fn bindgen_test_layout_btrfs_chunk() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_chunk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_chunk>(),
        80usize,
        concat!("Size of: ", stringify!(btrfs_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_chunk>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_chunk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripe_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(stripe_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_align) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(io_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_width) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(io_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_stripes) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(num_stripes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_stripes) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(sub_stripes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripe) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(stripe)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_free_space_entry {
    pub offset: __le64,
    pub bytes: __le64,
    pub type_: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_entry() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_free_space_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_entry>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_free_space_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_free_space_header {
    pub location: btrfs_disk_key,
    pub generation: __le64,
    pub num_entries: __le64,
    pub num_bitmaps: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_free_space_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_header>(),
        41usize,
        concat!("Size of: ", stringify!(btrfs_free_space_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bitmaps) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(num_bitmaps)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_header {
    pub csum: [u8_; 32usize],
    pub fsid: [u8_; 16usize],
    pub bytenr: __le64,
    pub flags: __le64,
    pub chunk_tree_uuid: [u8_; 16usize],
    pub generation: __le64,
    pub owner: __le64,
    pub nritems: __le32,
    pub level: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_header>(),
        101usize,
        concat!("Size of: ", stringify!(btrfs_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(csum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytenr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_tree_uuid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(chunk_tree_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nritems) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(nritems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_header),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_root_backup {
    pub tree_root: __le64,
    pub tree_root_gen: __le64,
    pub chunk_root: __le64,
    pub chunk_root_gen: __le64,
    pub extent_root: __le64,
    pub extent_root_gen: __le64,
    pub fs_root: __le64,
    pub fs_root_gen: __le64,
    pub dev_root: __le64,
    pub dev_root_gen: __le64,
    pub csum_root: __le64,
    pub csum_root_gen: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub num_devices: __le64,
    pub unsed_64: [__le64; 4usize],
    pub tree_root_level: u8_,
    pub chunk_root_level: u8_,
    pub extent_root_level: u8_,
    pub fs_root_level: u8_,
    pub dev_root_level: u8_,
    pub csum_root_level: u8_,
    pub unused_8: [u8_; 10usize],
}
#[test]
fn bindgen_test_layout_btrfs_root_backup() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_root_backup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_backup>(),
        168usize,
        concat!("Size of: ", stringify!(btrfs_root_backup))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_backup>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_backup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(tree_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_root_gen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(tree_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(chunk_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root_gen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(chunk_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_root) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(extent_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_root_gen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(extent_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(fs_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_root_gen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(fs_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_root) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(dev_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_root_gen) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(dev_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_root) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(csum_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_root_gen) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(csum_root_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_devices) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(num_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unsed_64) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(unsed_64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_root_level) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(tree_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root_level) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(chunk_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_root_level) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(extent_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_root_level) as usize - ptr as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(fs_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_root_level) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(dev_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_root_level) as usize - ptr as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(csum_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused_8) as usize - ptr as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_backup),
            "::",
            stringify!(unused_8)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_super_block {
    pub csum: [u8_; 32usize],
    pub fsid: [u8_; 16usize],
    pub bytenr: __le64,
    pub flags: __le64,
    pub magic: __le64,
    pub generation: __le64,
    pub root: __le64,
    pub chunk_root: __le64,
    pub log_root: __le64,
    pub log_root_transid: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub root_dir_objectid: __le64,
    pub num_devices: __le64,
    pub sectorsize: __le32,
    pub nodesize: __le32,
    pub __unused_leafsize: __le32,
    pub stripesize: __le32,
    pub sys_chunk_array_size: __le32,
    pub chunk_root_generation: __le64,
    pub compat_flags: __le64,
    pub compat_ro_flags: __le64,
    pub incompat_flags: __le64,
    pub csum_type: __le16,
    pub root_level: u8_,
    pub chunk_root_level: u8_,
    pub log_root_level: u8_,
    pub dev_item: btrfs_dev_item,
    pub label: [::std::os::raw::c_char; 256usize],
    pub cache_generation: __le64,
    pub uuid_tree_generation: __le64,
    pub metadata_uuid: [u8_; 16usize],
    pub nr_global_roots: __le64,
    pub block_group_root: __le64,
    pub block_group_root_generation: __le64,
    pub block_group_root_level: u8_,
    pub reserved8: [u8_; 7usize],
    pub reserved: [__le64; 24usize],
    pub sys_chunk_array: [u8_; 2048usize],
    pub super_roots: [btrfs_root_backup; 4usize],
    pub padding: [u8_; 565usize],
}
#[test]
fn bindgen_test_layout_btrfs_super_block() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_super_block> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_super_block>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_super_block))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_super_block>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_super_block))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(csum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytenr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(chunk_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_root) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(log_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_root_transid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(log_root_transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_dir_objectid) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(root_dir_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_devices) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(num_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectorsize) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(sectorsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodesize) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__unused_leafsize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(__unused_leafsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripesize) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(stripesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_chunk_array_size) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(sys_chunk_array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root_generation) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(chunk_root_generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compat_flags) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(compat_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compat_ro_flags) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(compat_ro_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incompat_flags) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(incompat_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_type) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(csum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_level) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root_level) as usize - ptr as usize },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(chunk_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_root_level) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(log_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_item) as usize - ptr as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(dev_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        299usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_generation) as usize - ptr as usize },
        555usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(cache_generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid_tree_generation) as usize - ptr as usize },
        563usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(uuid_tree_generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata_uuid) as usize - ptr as usize },
        571usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(metadata_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_global_roots) as usize - ptr as usize },
        587usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(nr_global_roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group_root) as usize - ptr as usize },
        595usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(block_group_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group_root_generation) as usize - ptr as usize },
        603usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(block_group_root_generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group_root_level) as usize - ptr as usize },
        611usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(block_group_root_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved8) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(reserved8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        619usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_chunk_array) as usize - ptr as usize },
        811usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(sys_chunk_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_roots) as usize - ptr as usize },
        2859usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(super_roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        3531usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_super_block),
            "::",
            stringify!(padding)
        )
    );
}
impl Default for btrfs_super_block {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_item {
    pub key: btrfs_disk_key,
    pub offset: __le32,
    pub size: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_item>(),
        25usize,
        concat!("Size of: ", stringify!(btrfs_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_item),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_item),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_item),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
pub struct btrfs_leaf {
    pub header: btrfs_header,
    pub items: __IncompleteArrayField<btrfs_item>,
}
#[test]
fn bindgen_test_layout_btrfs_leaf() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_leaf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_leaf>(),
        101usize,
        concat!("Size of: ", stringify!(btrfs_leaf))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_leaf>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_leaf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_leaf),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_leaf),
            "::",
            stringify!(items)
        )
    );
}
impl Default for btrfs_leaf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_key_ptr {
    pub key: btrfs_disk_key,
    pub blockptr: __le64,
    pub generation: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_key_ptr() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_key_ptr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_key_ptr>(),
        33usize,
        concat!("Size of: ", stringify!(btrfs_key_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_key_ptr>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_key_ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key_ptr),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockptr) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key_ptr),
            "::",
            stringify!(blockptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key_ptr),
            "::",
            stringify!(generation)
        )
    );
}
#[repr(C, packed)]
pub struct btrfs_node {
    pub header: btrfs_header,
    pub ptrs: __IncompleteArrayField<btrfs_key_ptr>,
}
#[test]
fn bindgen_test_layout_btrfs_node() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_node>(),
        101usize,
        concat!("Size of: ", stringify!(btrfs_node))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_node>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_node),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrs) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_node),
            "::",
            stringify!(ptrs)
        )
    );
}
impl Default for btrfs_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_path {
    pub nodes: [*mut extent_buffer; 8usize],
    pub slots: [::std::os::raw::c_int; 8usize],
    pub reada: ::std::os::raw::c_schar,
    pub lowest_level: u8_,
    pub search_for_split: u8_,
    pub skip_check_block: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_path() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_path> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_path>(),
        104usize,
        concat!("Size of: ", stringify!(btrfs_path))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_path>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_path))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slots) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(slots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reada) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(reada)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowest_level) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(lowest_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_for_split) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(search_for_split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_check_block) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_path),
            "::",
            stringify!(skip_check_block)
        )
    );
}
impl Default for btrfs_path {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_extent_item {
    pub refs: __le64,
    pub generation: __le64,
    pub flags: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_extent_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_extent_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_item>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_extent_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_extent_item_v0 {
    pub refs: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_item_v0() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_extent_item_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_item_v0>(),
        4usize,
        concat!("Size of: ", stringify!(btrfs_extent_item_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_item_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_item_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item_v0),
            "::",
            stringify!(refs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_tree_block_info {
    pub key: btrfs_disk_key,
    pub level: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_tree_block_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_tree_block_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_tree_block_info>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_tree_block_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_tree_block_info>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_tree_block_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tree_block_info),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tree_block_info),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_extent_data_ref {
    pub root: __le64,
    pub objectid: __le64,
    pub offset: __le64,
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_data_ref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_extent_data_ref> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_data_ref>(),
        28usize,
        concat!("Size of: ", stringify!(btrfs_extent_data_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_data_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_data_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_shared_data_ref {
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_shared_data_ref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_shared_data_ref> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_shared_data_ref>(),
        4usize,
        concat!("Size of: ", stringify!(btrfs_shared_data_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_shared_data_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_shared_data_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_shared_data_ref),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_extent_inline_ref {
    pub type_: u8_,
    pub offset: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_extent_inline_ref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_extent_inline_ref> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_inline_ref>(),
        9usize,
        concat!("Size of: ", stringify!(btrfs_extent_inline_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_inline_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_inline_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_inline_ref),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_inline_ref),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_extent_ref_v0 {
    pub root: __le64,
    pub generation: __le64,
    pub objectid: __le64,
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_ref_v0() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_extent_ref_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_ref_v0>(),
        28usize,
        concat!("Size of: ", stringify!(btrfs_extent_ref_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_ref_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_ref_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_dev_extent {
    pub chunk_tree: __le64,
    pub chunk_objectid: __le64,
    pub chunk_offset: __le64,
    pub length: __le64,
    pub chunk_tree_uuid: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_extent() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_dev_extent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_extent>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_dev_extent))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_extent>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_extent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_tree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_tree_uuid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_tree_uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_inode_ref {
    pub index: __le64,
    pub name_len: __le16,
}
#[test]
fn bindgen_test_layout_btrfs_inode_ref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_inode_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_ref>(),
        10usize,
        concat!("Size of: ", stringify!(btrfs_inode_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_ref),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_ref),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C, packed)]
pub struct btrfs_inode_extref {
    pub parent_objectid: __le64,
    pub index: __le64,
    pub name_len: __le16,
    pub name: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_btrfs_inode_extref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_inode_extref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_extref>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_inode_extref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_extref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_extref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_objectid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(parent_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(name)
        )
    );
}
impl Default for btrfs_inode_extref {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_timespec {
    pub sec: __le64,
    pub nsec: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_timespec>(),
        12usize,
        concat!("Size of: ", stringify!(btrfs_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_timespec>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_timespec),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_timespec),
            "::",
            stringify!(nsec)
        )
    );
}
pub const BTRFS_COMPRESS_NONE: btrfs_compression_type = 0;
pub const BTRFS_COMPRESS_ZLIB: btrfs_compression_type = 1;
pub const BTRFS_COMPRESS_LZO: btrfs_compression_type = 2;
pub const BTRFS_COMPRESS_ZSTD: btrfs_compression_type = 3;
pub const BTRFS_COMPRESS_TYPES: btrfs_compression_type = 3;
pub const BTRFS_COMPRESS_LAST: btrfs_compression_type = 4;
pub type btrfs_compression_type = ::std::os::raw::c_uint;
pub const BTRFS_ENCRYPTION_NONE: btrfs_encryption_type = 0;
pub const BTRFS_ENCRYPTION_LAST: btrfs_encryption_type = 1;
pub type btrfs_encryption_type = ::std::os::raw::c_uint;
pub const BTRFS_TREE_BLOCK_CLEAN: btrfs_tree_block_status = 0;
pub const BTRFS_TREE_BLOCK_INVALID_NRITEMS: btrfs_tree_block_status = 1;
pub const BTRFS_TREE_BLOCK_INVALID_PARENT_KEY: btrfs_tree_block_status = 2;
pub const BTRFS_TREE_BLOCK_BAD_KEY_ORDER: btrfs_tree_block_status = 3;
pub const BTRFS_TREE_BLOCK_INVALID_LEVEL: btrfs_tree_block_status = 4;
pub const BTRFS_TREE_BLOCK_INVALID_FREE_SPACE: btrfs_tree_block_status = 5;
pub const BTRFS_TREE_BLOCK_INVALID_OFFSETS: btrfs_tree_block_status = 6;
pub const BTRFS_TREE_BLOCK_INVALID_BLOCKPTR: btrfs_tree_block_status = 7;
pub type btrfs_tree_block_status = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_inode_item {
    pub generation: __le64,
    pub transid: __le64,
    pub size: __le64,
    pub nbytes: __le64,
    pub block_group: __le64,
    pub nlink: __le32,
    pub uid: __le32,
    pub gid: __le32,
    pub mode: __le32,
    pub rdev: __le64,
    pub flags: __le64,
    pub sequence: __le64,
    pub reserved: [__le64; 4usize],
    pub atime: btrfs_timespec,
    pub ctime: btrfs_timespec,
    pub mtime: btrfs_timespec,
    pub otime: btrfs_timespec,
}
#[test]
fn bindgen_test_layout_btrfs_inode_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_inode_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_item>(),
        160usize,
        concat!("Size of: ", stringify!(btrfs_inode_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(block_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlink) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdev) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otime) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(otime)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_dir_log_item {
    pub end: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_dir_log_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_dir_log_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_dir_log_item>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_dir_log_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dir_log_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dir_log_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_log_item),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_dir_item {
    pub location: btrfs_disk_key,
    pub transid: __le64,
    pub data_len: __le16,
    pub name_len: __le16,
    pub type_: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_dir_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_dir_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_dir_item>(),
        30usize,
        concat!("Size of: ", stringify!(btrfs_dir_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dir_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dir_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transid) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_root_item_v0 {
    pub inode: btrfs_inode_item,
    pub generation: __le64,
    pub root_dirid: __le64,
    pub bytenr: __le64,
    pub byte_limit: __le64,
    pub bytes_used: __le64,
    pub last_snapshot: __le64,
    pub flags: __le64,
    pub refs: __le32,
    pub drop_progress: btrfs_disk_key,
    pub drop_level: u8_,
    pub level: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_root_item_v0() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_root_item_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_item_v0>(),
        239usize,
        concat!("Size of: ", stringify!(btrfs_root_item_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_item_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_item_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_dirid) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(root_dirid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytenr) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_limit) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(byte_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_snapshot) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(last_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_progress) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(drop_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_level) as usize - ptr as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(drop_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item_v0),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_root_item {
    pub inode: btrfs_inode_item,
    pub generation: __le64,
    pub root_dirid: __le64,
    pub bytenr: __le64,
    pub byte_limit: __le64,
    pub bytes_used: __le64,
    pub last_snapshot: __le64,
    pub flags: __le64,
    pub refs: __le32,
    pub drop_progress: btrfs_disk_key,
    pub drop_level: u8_,
    pub level: u8_,
    pub generation_v2: __le64,
    pub uuid: [u8_; 16usize],
    pub parent_uuid: [u8_; 16usize],
    pub received_uuid: [u8_; 16usize],
    pub ctransid: __le64,
    pub otransid: __le64,
    pub stransid: __le64,
    pub rtransid: __le64,
    pub ctime: btrfs_timespec,
    pub otime: btrfs_timespec,
    pub stime: btrfs_timespec,
    pub rtime: btrfs_timespec,
    pub global_tree_id: __le64,
    pub reserved: [__le64; 7usize],
}
#[test]
fn bindgen_test_layout_btrfs_root_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_root_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_item>(),
        439usize,
        concat!("Size of: ", stringify!(btrfs_root_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_dirid) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(root_dirid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytenr) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_limit) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(byte_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_snapshot) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(last_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_progress) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(drop_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_level) as usize - ptr as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(drop_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation_v2) as usize - ptr as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(generation_v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        247usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_uuid) as usize - ptr as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(parent_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_uuid) as usize - ptr as usize },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(received_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctransid) as usize - ptr as usize },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(ctransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otransid) as usize - ptr as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(otransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stransid) as usize - ptr as usize },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtransid) as usize - ptr as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        327usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otime) as usize - ptr as usize },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(otime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stime) as usize - ptr as usize },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtime) as usize - ptr as usize },
        363usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_tree_id) as usize - ptr as usize },
        375usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(global_tree_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        383usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_root_ref {
    pub dirid: __le64,
    pub sequence: __le64,
    pub name_len: __le16,
}
#[test]
fn bindgen_test_layout_btrfs_root_ref() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_root_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_ref>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_root_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_disk_balance_args {
    pub profiles: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1,
    pub devid: __le64,
    pub pstart: __le64,
    pub pend: __le64,
    pub vstart: __le64,
    pub vend: __le64,
    pub target: __le64,
    pub flags: __le64,
    pub __bindgen_anon_2: btrfs_disk_balance_args__bindgen_ty_2,
    pub stripes_min: __le32,
    pub stripes_max: __le32,
    pub unused: [__le64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_1 {
    pub usage: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __le32,
    pub usage_max: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_balance_args__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for btrfs_disk_balance_args__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_2 {
    pub limit: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __le32,
    pub limit_max: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_balance_args__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for btrfs_disk_balance_args__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_disk_balance_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args>(),
        136usize,
        concat!("Size of: ", stringify!(btrfs_disk_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_disk_balance_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profiles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstart) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(pstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pend) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(pend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vstart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(vstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vend) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(vend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripes_min) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(stripes_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripes_max) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(stripes_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_disk_balance_args {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_item {
    pub flags: __le64,
    pub data: btrfs_disk_balance_args,
    pub meta: btrfs_disk_balance_args,
    pub sys: btrfs_disk_balance_args,
    pub unused: [__le64; 4usize],
}
#[test]
fn bindgen_test_layout_btrfs_balance_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_balance_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_item>(),
        448usize,
        concat!("Size of: ", stringify!(btrfs_balance_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_balance_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for btrfs_balance_item {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_file_extent_item {
    pub generation: __le64,
    pub ram_bytes: __le64,
    pub compression: u8_,
    pub encryption: u8_,
    pub other_encoding: __le16,
    pub type_: u8_,
    pub disk_bytenr: __le64,
    pub disk_num_bytes: __le64,
    pub offset: __le64,
    pub num_bytes: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_file_extent_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_file_extent_item> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_file_extent_item>(),
        53usize,
        concat!("Size of: ", stringify!(btrfs_file_extent_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_file_extent_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_file_extent_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ram_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(ram_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryption) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(encryption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other_encoding) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(other_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_bytenr) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(disk_bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_num_bytes) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(disk_num_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bytes) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(num_bytes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_dev_stats_item {
    pub values: [__le64; 5usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_stats_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_dev_stats_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_stats_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_dev_stats_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_stats_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_stats_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_stats_item),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_csum_item {
    pub csum: u8_,
}
#[test]
fn bindgen_test_layout_btrfs_csum_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_csum_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_csum_item>(),
        1usize,
        concat!("Size of: ", stringify!(btrfs_csum_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_csum_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_csum_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_csum_item),
            "::",
            stringify!(csum)
        )
    );
}
pub const BTRFS_RAID_RAID10: btrfs_raid_types = 0;
pub const BTRFS_RAID_RAID1: btrfs_raid_types = 1;
pub const BTRFS_RAID_DUP: btrfs_raid_types = 2;
pub const BTRFS_RAID_RAID0: btrfs_raid_types = 3;
pub const BTRFS_RAID_SINGLE: btrfs_raid_types = 4;
pub const BTRFS_RAID_RAID5: btrfs_raid_types = 5;
pub const BTRFS_RAID_RAID6: btrfs_raid_types = 6;
pub const BTRFS_RAID_RAID1C3: btrfs_raid_types = 7;
pub const BTRFS_RAID_RAID1C4: btrfs_raid_types = 8;
pub const BTRFS_NR_RAID_TYPES: btrfs_raid_types = 9;
pub type btrfs_raid_types = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_qgroup_status_item {
    pub version: __le64,
    pub generation: __le64,
    pub flags: __le64,
    pub rescan: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_status_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_qgroup_status_item> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_status_item>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_status_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_status_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_status_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(rescan)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_block_group_item {
    pub used: __le64,
    pub chunk_objectid: __le64,
    pub flags: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_block_group_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_block_group_item> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_block_group_item>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_block_group_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_block_group_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_block_group_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_objectid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(chunk_objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_free_space_info {
    pub extent_count: __le32,
    pub flags: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_free_space_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_info>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_free_space_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_info>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_info),
            "::",
            stringify!(extent_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_info),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_qgroup_info_item {
    pub generation: __le64,
    pub referenced: __le64,
    pub referenced_compressed: __le64,
    pub exclusive: __le64,
    pub exclusive_compressed: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_info_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_qgroup_info_item> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_info_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_info_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_info_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_info_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(referenced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenced_compressed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(referenced_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(exclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive_compressed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(exclusive_compressed)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_qgroup_limit_item {
    pub flags: __le64,
    pub max_referenced: __le64,
    pub max_exclusive: __le64,
    pub rsv_referenced: __le64,
    pub rsv_exclusive: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_limit_item() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_qgroup_limit_item> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_limit_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_limit_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_limit_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_limit_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_referenced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(max_referenced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_exclusive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(max_exclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_referenced) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(rsv_referenced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_exclusive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(rsv_exclusive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_space_info {
    pub flags: u64_,
    pub total_bytes: u64_,
    pub bytes_used: u64_,
    pub bytes_pinned: u64_,
    pub bytes_reserved: u64_,
    pub full: ::std::os::raw::c_int,
    pub list: list_head,
}
#[test]
fn bindgen_test_layout_btrfs_space_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_space_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_space_info>(),
        64usize,
        concat!("Size of: ", stringify!(btrfs_space_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_space_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_space_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_pinned) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(bytes_pinned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(bytes_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_space_info),
            "::",
            stringify!(list)
        )
    );
}
impl Default for btrfs_space_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_block_group {
    pub space_info: *mut btrfs_space_info,
    pub free_space_ctl: *mut btrfs_free_space_ctl,
    pub start: u64_,
    pub length: u64_,
    pub used: u64_,
    pub bytes_super: u64_,
    pub pinned: u64_,
    pub flags: u64_,
    pub cached: ::std::os::raw::c_int,
    pub ro: ::std::os::raw::c_int,
    pub bitmap_high_thresh: u32_,
    pub bitmap_low_thresh: u32_,
    pub cache_node: rb_node,
    pub dirty_list: list_head,
    pub alloc_offset: u64_,
    pub write_offset: u64_,
    pub global_root_id: u64_,
}
#[test]
fn bindgen_test_layout_btrfs_block_group() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_block_group> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_block_group>(),
        144usize,
        concat!("Size of: ", stringify!(btrfs_block_group))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_block_group>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_block_group))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(space_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_space_ctl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(free_space_ctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_super) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(bytes_super)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinned) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(pinned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ro) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(ro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap_high_thresh) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(bitmap_high_thresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap_low_thresh) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(bitmap_low_thresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_node) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(cache_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_list) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(dirty_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(alloc_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_offset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(write_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_root_id) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group),
            "::",
            stringify!(global_root_id)
        )
    );
}
impl Default for btrfs_block_group {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_fs_devices {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_fs_info {
    pub chunk_tree_uuid: [u8_; 16usize],
    pub new_chunk_tree_uuid: *mut u8_,
    pub fs_root: *mut btrfs_root,
    pub tree_root: *mut btrfs_root,
    pub chunk_root: *mut btrfs_root,
    pub dev_root: *mut btrfs_root,
    pub quota_root: *mut btrfs_root,
    pub uuid_root: *mut btrfs_root,
    pub block_group_root: *mut btrfs_root,
    pub global_roots_tree: rb_root,
    pub fs_root_tree: rb_root,
    pub log_root_tree: *mut btrfs_root,
    pub extent_cache: extent_io_tree,
    pub free_space_cache: extent_io_tree,
    pub pinned_extents: extent_io_tree,
    pub extent_ins: extent_io_tree,
    pub excluded_extents: *mut extent_io_tree,
    pub block_group_cache_tree: rb_root,
    pub mapping_tree: btrfs_mapping_tree,
    pub generation: u64_,
    pub last_trans_committed: u64_,
    pub avail_data_alloc_bits: u64_,
    pub avail_metadata_alloc_bits: u64_,
    pub avail_system_alloc_bits: u64_,
    pub data_alloc_profile: u64_,
    pub metadata_alloc_profile: u64_,
    pub system_alloc_profile: u64_,
    pub running_transaction: *mut btrfs_trans_handle,
    pub super_copy: *mut btrfs_super_block,
    pub super_bytenr: u64_,
    pub total_pinned: u64_,
    pub nr_global_roots: u64_,
    pub dirty_cowonly_roots: list_head,
    pub recow_ebs: list_head,
    pub fs_devices: *mut btrfs_fs_devices,
    pub space_info: list_head,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub transaction_aborted: ::std::os::raw::c_int,
    pub force_csum_type: ::std::os::raw::c_int,
    pub free_extent_hook: ::std::option::Option<
        unsafe extern "C" fn(
            bytenr: u64_,
            num_bytes: u64_,
            parent: u64_,
            root_objectid: u64_,
            owner: u64_,
            offset: u64_,
            refs_to_drop: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsck_extent_cache: *mut cache_tree,
    pub corrupt_blocks: *mut cache_tree,
    pub nodesize: u32_,
    pub sectorsize: u32_,
    pub stripesize: u32_,
    pub leaf_data_size: u32_,
    pub csum_type: u16_,
    pub csum_size: u16_,
    pub __bindgen_anon_1: btrfs_fs_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_fs_info__bindgen_ty_1 {
    pub zone_size: u64_,
    pub zoned: u64_,
}
#[test]
fn bindgen_test_layout_btrfs_fs_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_fs_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_fs_info__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_fs_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_fs_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_fs_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zone_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info__bindgen_ty_1),
            "::",
            stringify!(zone_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zoned) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info__bindgen_ty_1),
            "::",
            stringify!(zoned)
        )
    );
}
impl Default for btrfs_fs_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_btrfs_fs_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_fs_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_fs_info>(),
        552usize,
        concat!("Size of: ", stringify!(btrfs_fs_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_fs_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_fs_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_tree_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(chunk_tree_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_chunk_tree_uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(new_chunk_tree_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(fs_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_root) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(tree_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_root) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(chunk_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(dev_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quota_root) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(quota_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid_root) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(uuid_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group_root) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(block_group_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_roots_tree) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(global_roots_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_root_tree) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(fs_root_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_root_tree) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(log_root_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_cache) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(extent_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_space_cache) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(free_space_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinned_extents) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(pinned_extents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_ins) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(extent_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).excluded_extents) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(excluded_extents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_group_cache_tree) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(block_group_cache_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapping_tree) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(mapping_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_trans_committed) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(last_trans_committed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_data_alloc_bits) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(avail_data_alloc_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_metadata_alloc_bits) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(avail_metadata_alloc_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_system_alloc_bits) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(avail_system_alloc_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_alloc_profile) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(data_alloc_profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata_alloc_profile) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(metadata_alloc_profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_alloc_profile) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(system_alloc_profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running_transaction) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(running_transaction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_copy) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(super_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_bytenr) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(super_bytenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_pinned) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(total_pinned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_global_roots) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(nr_global_roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_cowonly_roots) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(dirty_cowonly_roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recow_ebs) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(recow_ebs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_devices) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(fs_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_info) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(space_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transaction_aborted) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(transaction_aborted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_csum_type) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(force_csum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_extent_hook) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(free_extent_hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsck_extent_cache) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(fsck_extent_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corrupt_blocks) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(corrupt_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodesize) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectorsize) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(sectorsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stripesize) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(stripesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leaf_data_size) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(leaf_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_type) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(csum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csum_size) as usize - ptr as usize },
        538usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_fs_info),
            "::",
            stringify!(csum_size)
        )
    );
}
impl Default for btrfs_fs_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl btrfs_fs_info {
    #[inline]
    pub fn system_allocs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_system_allocs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn readonly(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_readonly(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn on_restoring(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_on_restoring(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_chunk_recover(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_chunk_recover(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quota_enabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quota_enabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn suppress_check_block_errors(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_suppress_check_block_errors(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_fsid_mismatch(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_fsid_mismatch(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_csum_check(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_csum_check(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_chunk_tree_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_chunk_tree_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn avoid_meta_chunk_alloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_avoid_meta_chunk_alloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn avoid_sys_chunk_alloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_avoid_sys_chunk_alloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn finalize_on_close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_finalize_on_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hide_names(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hide_names(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_transid_mismatch(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_transid_mismatch(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        system_allocs: ::std::os::raw::c_uint,
        readonly: ::std::os::raw::c_uint,
        on_restoring: ::std::os::raw::c_uint,
        is_chunk_recover: ::std::os::raw::c_uint,
        quota_enabled: ::std::os::raw::c_uint,
        suppress_check_block_errors: ::std::os::raw::c_uint,
        ignore_fsid_mismatch: ::std::os::raw::c_uint,
        skip_csum_check: ::std::os::raw::c_uint,
        ignore_chunk_tree_error: ::std::os::raw::c_uint,
        avoid_meta_chunk_alloc: ::std::os::raw::c_uint,
        avoid_sys_chunk_alloc: ::std::os::raw::c_uint,
        finalize_on_close: ::std::os::raw::c_uint,
        hide_names: ::std::os::raw::c_uint,
        allow_transid_mismatch: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let system_allocs: u32 = unsafe { ::std::mem::transmute(system_allocs) };
            system_allocs as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let readonly: u32 = unsafe { ::std::mem::transmute(readonly) };
            readonly as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let on_restoring: u32 = unsafe { ::std::mem::transmute(on_restoring) };
            on_restoring as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_chunk_recover: u32 = unsafe { ::std::mem::transmute(is_chunk_recover) };
            is_chunk_recover as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let quota_enabled: u32 = unsafe { ::std::mem::transmute(quota_enabled) };
            quota_enabled as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let suppress_check_block_errors: u32 =
                unsafe { ::std::mem::transmute(suppress_check_block_errors) };
            suppress_check_block_errors as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ignore_fsid_mismatch: u32 = unsafe { ::std::mem::transmute(ignore_fsid_mismatch) };
            ignore_fsid_mismatch as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let skip_csum_check: u32 = unsafe { ::std::mem::transmute(skip_csum_check) };
            skip_csum_check as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ignore_chunk_tree_error: u32 =
                unsafe { ::std::mem::transmute(ignore_chunk_tree_error) };
            ignore_chunk_tree_error as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let avoid_meta_chunk_alloc: u32 =
                unsafe { ::std::mem::transmute(avoid_meta_chunk_alloc) };
            avoid_meta_chunk_alloc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let avoid_sys_chunk_alloc: u32 =
                unsafe { ::std::mem::transmute(avoid_sys_chunk_alloc) };
            avoid_sys_chunk_alloc as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let finalize_on_close: u32 = unsafe { ::std::mem::transmute(finalize_on_close) };
            finalize_on_close as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let hide_names: u32 = unsafe { ::std::mem::transmute(hide_names) };
            hide_names as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let allow_transid_mismatch: u32 =
                unsafe { ::std::mem::transmute(allow_transid_mismatch) };
            allow_transid_mismatch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root {
    pub node: *mut extent_buffer,
    pub commit_root: *mut extent_buffer,
    pub root_item: btrfs_root_item,
    pub root_key: btrfs_key,
    pub fs_info: *mut btrfs_fs_info,
    pub objectid: u64_,
    pub last_trans: u64_,
    pub ref_cows: ::std::os::raw::c_int,
    pub track_dirty: ::std::os::raw::c_int,
    pub type_: u32_,
    pub last_inode_alloc: u64_,
    pub unaligned_extent_recs: list_head,
    pub dirty_list: list_head,
    pub rb_node: rb_node,
}
#[test]
fn bindgen_test_layout_btrfs_root() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_root> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_root>(),
        576usize,
        concat!("Size of: ", stringify!(btrfs_root))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_root))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit_root) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(commit_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_item) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(root_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_key) as usize - ptr as usize },
        455usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(root_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_info) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(fs_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectid) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_trans) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(last_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_cows) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(ref_cows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).track_dirty) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(track_dirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_inode_alloc) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(last_inode_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unaligned_extent_recs) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(unaligned_extent_recs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_list) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(dirty_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_node) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root),
            "::",
            stringify!(rb_node)
        )
    );
}
impl Default for btrfs_root {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BTRFS_TLV_U8: btrfs_tlv_type = 0;
pub const BTRFS_TLV_U16: btrfs_tlv_type = 1;
pub const BTRFS_TLV_U32: btrfs_tlv_type = 2;
pub const BTRFS_TLV_U64: btrfs_tlv_type = 3;
pub const BTRFS_TLV_BINARY: btrfs_tlv_type = 4;
pub const BTRFS_TLV_STRING: btrfs_tlv_type = 5;
pub const BTRFS_TLV_UUID: btrfs_tlv_type = 6;
pub const BTRFS_TLV_TIMESPEC: btrfs_tlv_type = 7;
pub type btrfs_tlv_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_stream_header {
    pub magic: [::std::os::raw::c_char; 13usize],
    pub version: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_stream_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_stream_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_stream_header>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_stream_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_stream_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_stream_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stream_header),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stream_header),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_cmd_header {
    pub len: __le32,
    pub cmd: __le16,
    pub crc: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_cmd_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_cmd_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_cmd_header>(),
        10usize,
        concat!("Size of: ", stringify!(btrfs_cmd_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_cmd_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_cmd_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_cmd_header),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_cmd_header),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_cmd_header),
            "::",
            stringify!(crc)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_tlv_header {
    pub tlv_type: __le16,
    pub tlv_len: __le16,
}
#[test]
fn bindgen_test_layout_btrfs_tlv_header() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_tlv_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_tlv_header>(),
        4usize,
        concat!("Size of: ", stringify!(btrfs_tlv_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_tlv_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_tlv_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlv_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tlv_header),
            "::",
            stringify!(tlv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlv_len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tlv_header),
            "::",
            stringify!(tlv_len)
        )
    );
}
pub const BTRFS_SEND_C_UNSPEC: btrfs_send_cmd = 0;
pub const BTRFS_SEND_C_SUBVOL: btrfs_send_cmd = 1;
pub const BTRFS_SEND_C_SNAPSHOT: btrfs_send_cmd = 2;
pub const BTRFS_SEND_C_MKFILE: btrfs_send_cmd = 3;
pub const BTRFS_SEND_C_MKDIR: btrfs_send_cmd = 4;
pub const BTRFS_SEND_C_MKNOD: btrfs_send_cmd = 5;
pub const BTRFS_SEND_C_MKFIFO: btrfs_send_cmd = 6;
pub const BTRFS_SEND_C_MKSOCK: btrfs_send_cmd = 7;
pub const BTRFS_SEND_C_SYMLINK: btrfs_send_cmd = 8;
pub const BTRFS_SEND_C_RENAME: btrfs_send_cmd = 9;
pub const BTRFS_SEND_C_LINK: btrfs_send_cmd = 10;
pub const BTRFS_SEND_C_UNLINK: btrfs_send_cmd = 11;
pub const BTRFS_SEND_C_RMDIR: btrfs_send_cmd = 12;
pub const BTRFS_SEND_C_SET_XATTR: btrfs_send_cmd = 13;
pub const BTRFS_SEND_C_REMOVE_XATTR: btrfs_send_cmd = 14;
pub const BTRFS_SEND_C_WRITE: btrfs_send_cmd = 15;
pub const BTRFS_SEND_C_CLONE: btrfs_send_cmd = 16;
pub const BTRFS_SEND_C_TRUNCATE: btrfs_send_cmd = 17;
pub const BTRFS_SEND_C_CHMOD: btrfs_send_cmd = 18;
pub const BTRFS_SEND_C_CHOWN: btrfs_send_cmd = 19;
pub const BTRFS_SEND_C_UTIMES: btrfs_send_cmd = 20;
pub const BTRFS_SEND_C_END: btrfs_send_cmd = 21;
pub const BTRFS_SEND_C_UPDATE_EXTENT: btrfs_send_cmd = 22;
pub const __BTRFS_SEND_C_MAX: btrfs_send_cmd = 23;
pub type btrfs_send_cmd = ::std::os::raw::c_uint;
pub const BTRFS_SEND_A_UNSPEC: _bindgen_ty_2 = 0;
pub const BTRFS_SEND_A_UUID: _bindgen_ty_2 = 1;
pub const BTRFS_SEND_A_CTRANSID: _bindgen_ty_2 = 2;
pub const BTRFS_SEND_A_INO: _bindgen_ty_2 = 3;
pub const BTRFS_SEND_A_SIZE: _bindgen_ty_2 = 4;
pub const BTRFS_SEND_A_MODE: _bindgen_ty_2 = 5;
pub const BTRFS_SEND_A_UID: _bindgen_ty_2 = 6;
pub const BTRFS_SEND_A_GID: _bindgen_ty_2 = 7;
pub const BTRFS_SEND_A_RDEV: _bindgen_ty_2 = 8;
pub const BTRFS_SEND_A_CTIME: _bindgen_ty_2 = 9;
pub const BTRFS_SEND_A_MTIME: _bindgen_ty_2 = 10;
pub const BTRFS_SEND_A_ATIME: _bindgen_ty_2 = 11;
pub const BTRFS_SEND_A_OTIME: _bindgen_ty_2 = 12;
pub const BTRFS_SEND_A_XATTR_NAME: _bindgen_ty_2 = 13;
pub const BTRFS_SEND_A_XATTR_DATA: _bindgen_ty_2 = 14;
pub const BTRFS_SEND_A_PATH: _bindgen_ty_2 = 15;
pub const BTRFS_SEND_A_PATH_TO: _bindgen_ty_2 = 16;
pub const BTRFS_SEND_A_PATH_LINK: _bindgen_ty_2 = 17;
pub const BTRFS_SEND_A_FILE_OFFSET: _bindgen_ty_2 = 18;
pub const BTRFS_SEND_A_DATA: _bindgen_ty_2 = 19;
pub const BTRFS_SEND_A_CLONE_UUID: _bindgen_ty_2 = 20;
pub const BTRFS_SEND_A_CLONE_CTRANSID: _bindgen_ty_2 = 21;
pub const BTRFS_SEND_A_CLONE_PATH: _bindgen_ty_2 = 22;
pub const BTRFS_SEND_A_CLONE_OFFSET: _bindgen_ty_2 = 23;
pub const BTRFS_SEND_A_CLONE_LEN: _bindgen_ty_2 = 24;
pub const __BTRFS_SEND_A_MAX: _bindgen_ty_2 = 25;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_send_ops {
    pub subvol: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            uuid: *const u8_,
            ctransid: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub snapshot: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            uuid: *const u8_,
            ctransid: u64_,
            parent_uuid: *const u8_,
            parent_ctransid: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkfile: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            mode: u64_,
            dev: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkfifo: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mksock: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            lnk: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            from: *const ::std::os::raw::c_char,
            to: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            lnk: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            offset: u64_,
            len: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            offset: u64_,
            len: u64_,
            clone_uuid: *const u8_,
            clone_ctransid: u64_,
            clone_path: *const ::std::os::raw::c_char,
            clone_offset: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_xattr: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_xattr: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            size: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            mode: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            uid: u64_,
            gid: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub utimes: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            at: *mut timespec,
            mt: *mut timespec,
            ct: *mut timespec,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_extent: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            offset: u64_,
            len: u64_,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_btrfs_send_ops() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_send_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_send_ops>(),
        168usize,
        concat!("Size of: ", stringify!(btrfs_send_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_send_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_send_ops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subvol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(subvol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snapshot) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkfile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(mkfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkdir) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mknod) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkfifo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(mkfifo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mksock) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(mksock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symlink) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmdir) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_xattr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(set_xattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove_xattr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(remove_xattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truncate) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chmod) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chown) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utimes) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(utimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_extent) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_send_ops),
            "::",
            stringify!(update_extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct iovec {
    pub _address: u8,
}
