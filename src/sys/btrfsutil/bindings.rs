/* automatically generated by rust-bindgen 0.66.1 */

pub const BTRFS_UTIL_VERSION_MAJOR: u32 = 1;
pub const BTRFS_UTIL_VERSION_MINOR: u32 = 2;
pub const BTRFS_UTIL_VERSION_PATCH: u32 = 0;
pub const BTRFS_UTIL_CREATE_SNAPSHOT_RECURSIVE: u32 = 1;
pub const BTRFS_UTIL_CREATE_SNAPSHOT_READ_ONLY: u32 = 2;
pub const BTRFS_UTIL_CREATE_SNAPSHOT_MASK: u32 = 3;
pub const BTRFS_UTIL_DELETE_SUBVOLUME_RECURSIVE: u32 = 1;
pub const BTRFS_UTIL_DELETE_SUBVOLUME_MASK: u32 = 1;
pub const BTRFS_UTIL_SUBVOLUME_ITERATOR_POST_ORDER: u32 = 1;
pub const BTRFS_UTIL_SUBVOLUME_ITERATOR_MASK: u32 = 1;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub const BTRFS_UTIL_OK: btrfs_util_error = 0;
pub const BTRFS_UTIL_ERROR_STOP_ITERATION: btrfs_util_error = 1;
pub const BTRFS_UTIL_ERROR_NO_MEMORY: btrfs_util_error = 2;
pub const BTRFS_UTIL_ERROR_INVALID_ARGUMENT: btrfs_util_error = 3;
pub const BTRFS_UTIL_ERROR_NOT_BTRFS: btrfs_util_error = 4;
pub const BTRFS_UTIL_ERROR_NOT_SUBVOLUME: btrfs_util_error = 5;
pub const BTRFS_UTIL_ERROR_SUBVOLUME_NOT_FOUND: btrfs_util_error = 6;
pub const BTRFS_UTIL_ERROR_OPEN_FAILED: btrfs_util_error = 7;
pub const BTRFS_UTIL_ERROR_RMDIR_FAILED: btrfs_util_error = 8;
pub const BTRFS_UTIL_ERROR_UNLINK_FAILED: btrfs_util_error = 9;
pub const BTRFS_UTIL_ERROR_STAT_FAILED: btrfs_util_error = 10;
pub const BTRFS_UTIL_ERROR_STATFS_FAILED: btrfs_util_error = 11;
pub const BTRFS_UTIL_ERROR_SEARCH_FAILED: btrfs_util_error = 12;
pub const BTRFS_UTIL_ERROR_INO_LOOKUP_FAILED: btrfs_util_error = 13;
pub const BTRFS_UTIL_ERROR_SUBVOL_GETFLAGS_FAILED: btrfs_util_error = 14;
pub const BTRFS_UTIL_ERROR_SUBVOL_SETFLAGS_FAILED: btrfs_util_error = 15;
pub const BTRFS_UTIL_ERROR_SUBVOL_CREATE_FAILED: btrfs_util_error = 16;
pub const BTRFS_UTIL_ERROR_SNAP_CREATE_FAILED: btrfs_util_error = 17;
pub const BTRFS_UTIL_ERROR_SNAP_DESTROY_FAILED: btrfs_util_error = 18;
pub const BTRFS_UTIL_ERROR_DEFAULT_SUBVOL_FAILED: btrfs_util_error = 19;
pub const BTRFS_UTIL_ERROR_SYNC_FAILED: btrfs_util_error = 20;
pub const BTRFS_UTIL_ERROR_START_SYNC_FAILED: btrfs_util_error = 21;
pub const BTRFS_UTIL_ERROR_WAIT_SYNC_FAILED: btrfs_util_error = 22;
pub const BTRFS_UTIL_ERROR_GET_SUBVOL_INFO_FAILED: btrfs_util_error = 23;
pub const BTRFS_UTIL_ERROR_GET_SUBVOL_ROOTREF_FAILED: btrfs_util_error = 24;
pub const BTRFS_UTIL_ERROR_INO_LOOKUP_USER_FAILED: btrfs_util_error = 25;
pub const BTRFS_UTIL_ERROR_FS_INFO_FAILED: btrfs_util_error = 26;
pub type btrfs_util_error = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct btrfs_util_subvolume_info {
    pub id: u64,
    pub parent_id: u64,
    pub dir_id: u64,
    pub flags: u64,
    pub uuid: [u8; 16usize],
    pub parent_uuid: [u8; 16usize],
    pub received_uuid: [u8; 16usize],
    pub generation: u64,
    pub ctransid: u64,
    pub otransid: u64,
    pub stransid: u64,
    pub rtransid: u64,
    pub ctime: timespec,
    pub otime: timespec,
    pub stime: timespec,
    pub rtime: timespec,
}
#[test]
fn bindgen_test_layout_btrfs_util_subvolume_info() {
    const UNINIT: ::std::mem::MaybeUninit<btrfs_util_subvolume_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<btrfs_util_subvolume_info>(),
        184usize,
        concat!("Size of: ", stringify!(btrfs_util_subvolume_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_util_subvolume_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_util_subvolume_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(parent_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(dir_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_uuid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(parent_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_uuid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(received_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctransid) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(ctransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otransid) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(otransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stransid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtransid) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(otime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stime) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtime) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_util_subvolume_info),
            "::",
            stringify!(rtime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_util_qgroup_inherit {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_util_subvolume_iterator {
    _unused: [u8; 0],
}
